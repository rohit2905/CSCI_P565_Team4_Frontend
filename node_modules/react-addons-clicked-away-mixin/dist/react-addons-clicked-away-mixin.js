(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react-dom"], factory);
	else if(typeof exports === 'object')
		exports["ClickedAwayMixin"] = factory(require("react-dom"));
	else
		root["ClickedAwayMixin"] = factory(root["ReactDOM"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== "undefined") {
	    factory(module, exports, require('react-dom'));
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(mod, mod.exports, global.reactDom);
	    global.index = mod.exports;
	  }
	})(this, function (module, exports, _reactDom) {
	  'use strict';

	  Object.defineProperty(exports, "__esModule", {
	    value: true
	  });

	  var _reactDom2 = _interopRequireDefault(_reactDom);

	  function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	      default: obj
	    };
	  }

	  /**
	   * A mixin that will trigger `onClickedAway` function when a user clicks
	   * outside of the component. On component unmount, this mixin will ensure
	   * that the click event is removed.
	   *
	   * This mixin requires `onClickedAway` method. It will receive a React
	   * `SyntheticEvent` instance as its only argument.
	   *
	   * This mixin exposes two additional methods: `bindClickedAwayEvents` and
	   * `unbindClickedAwayEvents` to allow you to bind/unbind the window click
	   * event manually. This is useful for such features as dropdown menus as you
	   * may not need to always listen to the window click event when its closed.
	   *
	   * BROWSER SUPPORT NOTES:
	   *
	   * # Chrome (any)
	   * # FF 9+ (we use `Node.contains`)
	   * # IE versions >= 6 (using `attachEvent` and `detachEvent` handlers)
	   * # Safari 3+ (2.x implements contains incorrectly)
	   */

	  var ClickedAwayMixin = {
	    componentDidMount: function componentDidMount() {
	      // keep ref. to this component DOM element
	      this.el = _reactDom2.default.findDOMNode(this);
	      // auto-setup `window` click events for this component. If you wish, you
	      // may unbind the event in your components `componentDidMount` method
	      this.bindClickedAwayEvents();
	    },
	    componentWillUnmount: function componentWillUnmount() {
	      this.unbindClickedAwayEvents();
	    },
	    bindClickedAwayEvents: function bindClickedAwayEvents() {
	      if (window.addEventListener) {
	        // `addEventListener` will discard duplicate handlers so we don't need
	        // to setup any flags.
	        window.addEventListener('click', this._onWindowClick);
	      }
	      // IE < 9 Support
	      else {
	          // ensure we do not add dupe. handlers. `detachEvent`. This won't cause
	          // any error if no event was attached yet.
	          window.detachEvent('onclick', this._onWindowClick);
	          window.attachEvent('onclick', this._onWindowClick);
	        }
	    },
	    unbindClickedAwayEvents: function unbindClickedAwayEvents() {
	      if (window.removeEventListener) {
	        window.removeEventListener('click', this._onWindowClick);
	      }
	      // IE < 9 Support
	      else {
	          window.detachEvent('onclick', this._onWindowClick);
	        }
	    },
	    _onWindowClick: function _onWindowClick(event) {
	      if (this.el !== event.target && !this.el.contains(event.target)) {
	        this.onClickedAway(event);
	      }
	    }
	  };

	  exports.default = ClickedAwayMixin;
	  module.exports = exports['default'];
	});

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }
/******/ ])
});
;