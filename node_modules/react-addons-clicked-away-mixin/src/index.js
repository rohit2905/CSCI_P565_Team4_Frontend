import ReactDOM from 'react-dom';

/**
 * A mixin that will trigger `onClickedAway` function when a user clicks
 * outside of the component. On component unmount, this mixin will ensure
 * that the click event is removed.
 *
 * This mixin requires `onClickedAway` method. It will receive a React
 * `SyntheticEvent` instance as its only argument.
 *
 * This mixin exposes two additional methods: `bindClickedAwayEvents` and
 * `unbindClickedAwayEvents` to allow you to bind/unbind the window click
 * event manually. This is useful for such features as dropdown menus as you
 * may not need to always listen to the window click event when its closed.
 *
 * BROWSER SUPPORT NOTES:
 *
 * # Chrome (any)
 * # FF 9+ (we use `Node.contains`)
 * # IE versions >= 6 (using `attachEvent` and `detachEvent` handlers)
 * # Safari 3+ (2.x implements contains incorrectly)
 */

let ClickedAwayMixin = {

  componentDidMount() {
    // keep ref. to this component DOM element
    this.el = ReactDOM.findDOMNode(this);
    // auto-setup `window` click events for this component. If you wish, you
    // may unbind the event in your components `componentDidMount` method
    this.bindClickedAwayEvents();
  },

  componentWillUnmount() {
    this.unbindClickedAwayEvents();
  },

  bindClickedAwayEvents() {
    if (window.addEventListener) {
      // `addEventListener` will discard duplicate handlers so we don't need
      // to setup any flags.
      window.addEventListener('click', this._onWindowClick);
    }
    // IE < 9 Support
    else {
      // ensure we do not add dupe. handlers. `detachEvent`. This won't cause
      // any error if no event was attached yet.
      window.detachEvent('onclick', this._onWindowClick);
      window.attachEvent('onclick', this._onWindowClick);
    }
  },

  unbindClickedAwayEvents() {
    if (window.removeEventListener) {
      window.removeEventListener('click', this._onWindowClick);
    }
    // IE < 9 Support
    else {
      window.detachEvent('onclick', this._onWindowClick);
    }
  },

  _onWindowClick(event) {
    if (this.el !== event.target && !this.el.contains(event.target)) {
      this.onClickedAway(event);
    }
  }

};

export default ClickedAwayMixin;